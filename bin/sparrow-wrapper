#!/bin/bash

# Drag in configuration in `sparrow-config.sh` from current
# working directory or parents.
# Alternately, the location of this file can be specified using
# the SPARROW_CONFIG environment variable.

config_file="$SPARROW_CONFIG"

# Search for configuration file if it isn't found.
while [ $(pwd) != "/" ] && \
      [ -z $config_file ] && \
      [ -z $_SPARROW_CONFIG_UNSET ]; do
  if [ -f sparrow-config.sh ] ; then
    export config_file="$(readlink -f sparrow-config.sh)"
    break
  fi
  cd ..
done

# We might want to bail here if no config file is found.
if [ -z $config_file ] && [ -z $_SPARROW_CONFIG_UNSET ]; then
  echo "No configuration file found. Running using default values." >&2
  export _SPARROW_CONFIG_UNSET=1
fi

# Get path to sparrow installation from location of current file
# (even if symlinked)
# NOTE: This appears to only work on Linux right now.
export SPARROW_PATH="$(dirname "$(dirname "$(readlink -f "$0")")")"
cd "$SPARROW_PATH"

# If we haven't yet sourced the config file in a higher-level script
if [ -z $SPARROW_CONFIG ] && [ ! -z $config_file ] ; then
  echo "Using config file $(tput bold)$config_file$(tput sgr0)" >&2
  export SPARROW_CONFIG="$config_file"
  source "$config_file"
fi

# ENVIRONMENT VARIABLE DEFAULTS
# Set variables that might not be created in the config file
# to default values
default="$SPARROW_PATH/config/default-site-content"
export SPARROW_LAB_NAME="${SPARROW_LAB_NAME:-"Test Lab"}"
export SPARROW_INIT_SQL="${SPARROW_INIT_SQL:-"placeholder"}"
export SPARROW_SITE_CONTENT="${SPARROW_SITE_CONTENT:-"$default"}"
# We should maybe *REQUIRE* this to be set
export SPARROW_SECRET_KEY="${SPARROW_SECRET_KEY:-""}"

# The docker-compose volume for sparrow commands needs to be set
# even if a SPARROW_COMMANDS directory is not provided.
export SPARROW_COMMANDS_VOLUME="${SPARROW_COMMANDS:-"placeholder"}"


dir="bin"

# Default to help if nothing is provided
subcommand=$1
[ -z $subcommand ] && subcommand='--help'

if [ $subcommand = '--help' ]; then
  # Get help from within sparrow container
  # and append docker wrapper commands
  sparrow compose run backend python3 sparrow --help
  if [ ! -z $SPARROW_COMMANDS ]; then
    echo -e "\nLab-specific commands:"
    ls "$SPARROW_COMMANDS" \
    | grep sparrow- \
    | sed 's/sparrow-/  /g' \
    | grep --invert-match wrapper
  fi

  echo -e "\nDocker wrapper commands:"
  ls "$dir" \
  | grep sparrow- \
  | sed 's/sparrow-/  /g' \
  | grep --invert-match wrapper
  exit 0
fi

full_command="sparrow-$subcommand"
found_command=0
for f in $(ls "$dir" | grep sparrow-); do
  [ $found_command = 1 ] && break
  # We don't want to return this file...
  [ $f == 'sparrow-wrapper' ] && continue
  [ $f != $full_command ] && continue
  cmd="$dir/$full_command"
  found_command=1
done

if [ ! -z $SPARROW_COMMANDS ]; then
  for f in $(ls "$SPARROW_COMMANDS" | grep sparrow-); do
    [ $found_command = 1 ] && break
    # We don't want to return this file...
    [ $f != $full_command ] && continue
    cmd="$SPARROW_COMMANDS/$full_command"
    found_command=1
  done
fi

if [ $found_command = 0 ]; then
  # Run a command against sparrow within a docker container
  >&2 echo "Running command in container"
  sparrow compose run backend sparrow $@
else
  shift
  "$cmd" $@
fi
